{
  "contractName": "PositionToken",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "from",
          "type": "address"
        },
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "spender",
          "type": "address"
        },
        {
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "to",
          "type": "address"
        },
        {
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MARKET_SIDE",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "tokenName",
          "type": "string"
        },
        {
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "name": "marketSide",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "qtyToMint",
          "type": "uint256"
        },
        {
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "mintAndSendToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "qtyToRedeem",
          "type": "uint256"
        },
        {
          "name": "redeemer",
          "type": "address"
        }
      ],
      "name": "redeemToken",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.5.2+commit.1df8f40c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"qtyToMint\",\"type\":\"uint256\"},{\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"mintAndSendToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MARKET_SIDE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"qtyToRedeem\",\"type\":\"uint256\"},{\"name\":\"redeemer\",\"type\":\"address\"}],\"name\":\"redeemToken\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"tokenName\",\"type\":\"string\"},{\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"name\":\"marketSide\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"Phil Elsasser <phil@marketprotocol.io>\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"owner\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"return\":\"A uint256 representing the amount owned by the passed address.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.\",\"params\":{\"addedValue\":\"The amount of tokens to increase the allowance by.\",\"spender\":\"The address which will spend the funds.\"}},\"isOwner()\":{\"return\":\"true if `msg.sender` is the owner of the contract.\"},\"mintAndSendToken(uint256,address)\":{\"details\":\"Called by our MarketContract (owner) to create a long or short position token. These tokens are minted, and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new position tokens\",\"params\":{\"qtyToMint\":\"quantity of position tokens to mint (in base units)\",\"recipient\":\"the person minting and receiving these position tokens.\"}},\"owner()\":{\"return\":\"the address of the owner.\"},\"redeemToken(uint256,address)\":{\"details\":\"Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming both short and long tokens in order to claim their collateral, or the contract has settled, and only a single side of the tokens are needed to redeem (handled by the collateral pool)\",\"params\":{\"qtyToRedeem\":\"quantity of tokens to burn (remove from supply / circulation)\",\"redeemer\":\"the person redeeming these tokens (who are we taking the balance from)\"}},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token to a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint256 the amount of tokens to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Position Token\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"}},\"notice\":\"A token that represents a claim to a collateral pool and a short or long position. The collateral pool acts as the owner of this contract and controls minting and redemption of these tokens based on locked collateral in the pool. NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic every time a new market contract is deployed.\"}},\"settings\":{\"compilationTarget\":{\"/Users/andreianisimov/projects/honeylemon/dapp.honeylemon.market/packages/contracts/contracts/marketprotocol/tokens/PositionToken.sol\":\"PositionToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"/Users/andreianisimov/projects/honeylemon/dapp.honeylemon.market/packages/contracts/contracts/marketprotocol/tokens/PositionToken.sol\":{\"keccak256\":\"0xb27773c7601c1ca550ce926cbaa0fb94aca6d3a9dbcf63555187449154d0481d\",\"urls\":[\"bzzr://4e178aac5b6bde395c90ae516f0319ffe62608bd8eb8a92027161f200c5d3026\"]},\"openzeppelin-solidity/contracts/math/SafeMath.sol\":{\"keccak256\":\"0xc2a200a877c4a9b2475c246c54ffecc69ffde3e11af83319c63c2dc5458bac80\",\"urls\":[\"bzzr://c8876e2c39b60f155d748d71d715c8f3903fae5a405ac599adcb6ad2f9a583f9\"]},\"openzeppelin-solidity/contracts/ownership/Ownable.sol\":{\"keccak256\":\"0xcb16adc00dcf0d75e0bdf94379f4d5a6d74dca7c74e4183b94e15721159f8a30\",\"urls\":[\"bzzr://b81e03f7203cd628cfed19255911a04a05e8670d248afb48a7b067dd03b4ff55\"]},\"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0x3dceb7e4aa237a56111c13f77d7efadeceda7271d62bfac94ac79afab7c1f411\",\"urls\":[\"bzzr://2f34152a5bec385352002c31bc89f5e9935f628f1923ccea45c2281e0084a4db\"]},\"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x59e7df16169a498cb8837963b2f5461d88e63bd1eb6c7d58b814d76b84ccbe61\",\"urls\":[\"bzzr://e572c9c4e02e37349702451bf3b5dcbbc86a19da5a51695b5b3e1bfe1e7825dc\"]}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000d1038038062000d10833981018060405260608110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b820160208101848111156200006457600080fd5b81516401000000008111828201871017156200007f57600080fd5b505092919060200180516401000000008111156200009c57600080fd5b82016020810184811115620000b057600080fd5b8151640100000000811182820187101715620000cb57600080fd5b505060209091015160038054600160a060020a031916331790819055604051929450909250600160a060020a0316906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a38251620001379060049060208601906200018f565b5081516200014d9060059060208501906200018f565b506006805460ff1916905560ff811660018111156200016857fe5b6006805461ff0019166101008360018111156200018157fe5b021790555050505062000234565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620001d257805160ff191683800117855562000202565b8280016001018555821562000202579182015b8281111562000202578251825591602001919060010190620001e5565b506200021092915062000214565b5090565b6200023191905b808211156200021057600081556001016200021b565b90565b610acc80620002446000396000f3fe608060405234801561001057600080fd5b5060043610610133576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100bf578063a9059cbb1161008e578063a9059cbb1461034b578063b003b12714610377578063c3501ff6146103a3578063dd62ed3e146103cf578063f2fde38b146103fd57610133565b80638da5cb5b146102eb5780638f32d59b1461030f57806395d89b4114610317578063a457c2d71461031f57610133565b8063313ce56711610106578063313ce56714610245578063395093511461026357806370a082311461028f578063715018a6146102b55780637251cd02146102bf57610133565b806306fdde0314610138578063095ea7b3146101b557806318160ddd146101f557806323b872dd1461020f575b600080fd5b610140610423565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017a578181015183820152602001610162565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e1600480360360408110156101cb57600080fd5b50600160a060020a0381351690602001356104b1565b604080519115158252519081900360200190f35b6101fd6104c7565b60408051918252519081900360200190f35b6101e16004803603606081101561022557600080fd5b50600160a060020a038135811691602081013590911690604001356104cd565b61024d610524565b6040805160ff9092168252519081900360200190f35b6101e16004803603604081101561027957600080fd5b50600160a060020a03813516906020013561052d565b6101fd600480360360208110156102a557600080fd5b5035600160a060020a0316610569565b6102bd610584565b005b6102bd600480360360408110156102d557600080fd5b5080359060200135600160a060020a03166105ee565b6102f361060f565b60408051600160a060020a039092168252519081900360200190f35b6101e161061e565b61014061062f565b6101e16004803603604081101561033557600080fd5b50600160a060020a03813516906020013561068a565b6101e16004803603604081101561036157600080fd5b50600160a060020a0381351690602001356106c6565b61037f6106d3565b6040518082600181111561038f57fe5b60ff16815260200191505060405180910390f35b6102bd600480360360408110156103b957600080fd5b5080359060200135600160a060020a03166106e1565b6101fd600480360360408110156103e557600080fd5b50600160a060020a03813581169160200135166106fe565b6102bd6004803603602081101561041357600080fd5b5035600160a060020a0316610729565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b505050505081565b60006104be338484610748565b50600192915050565b60025490565b60006104da8484846107d4565b600160a060020a03841660009081526001602090815260408083203380855292529091205461051a918691610515908663ffffffff6108a116565b610748565b5060019392505050565b60065460ff1681565b336000818152600160209081526040808320600160a060020a038716845290915281205490916104be918590610515908663ffffffff6108b616565b600160a060020a031660009081526020819052604090205490565b61058c61061e565b151561059757600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6105f661061e565b151561060157600080fd5b61060b81836108cf565b5050565b600354600160a060020a031690565b600354600160a060020a0316331490565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a95780601f1061047e576101008083540402835291602001916104a9565b336000818152600160209081526040808320600160a060020a038716845290915281205490916104be918590610515908663ffffffff6108a116565b60006104be3384846107d4565b600654610100900460ff1681565b6106e961061e565b15156106f457600080fd5b61060b8183610979565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b61073161061e565b151561073c57600080fd5b61074581610a22565b50565b600160a060020a038216151561075d57600080fd5b600160a060020a038316151561077257600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03821615156107e957600080fd5b600160a060020a038316600090815260208190526040902054610812908263ffffffff6108a116565b600160a060020a038085166000908152602081905260408082209390935590841681522054610847908263ffffffff6108b616565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156108b057600080fd5b50900390565b6000828201838110156108c857600080fd5b9392505050565b600160a060020a03821615156108e457600080fd5b6002546108f7908263ffffffff6108b616565b600255600160a060020a038216600090815260208190526040902054610923908263ffffffff6108b616565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216151561098e57600080fd5b6002546109a1908263ffffffff6108a116565b600255600160a060020a0382166000908152602081905260409020546109cd908263ffffffff6108a116565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a0381161515610a3757600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820e84632a21e1d3c1dfeda16193bfa4e314be3c997609c800669b52f32d961d3e80029",
  "deployedBytecode": "0x608060405234801561001057600080fd5b5060043610610133576000357c0100000000000000000000000000000000000000000000000000000000900480638da5cb5b116100bf578063a9059cbb1161008e578063a9059cbb1461034b578063b003b12714610377578063c3501ff6146103a3578063dd62ed3e146103cf578063f2fde38b146103fd57610133565b80638da5cb5b146102eb5780638f32d59b1461030f57806395d89b4114610317578063a457c2d71461031f57610133565b8063313ce56711610106578063313ce56714610245578063395093511461026357806370a082311461028f578063715018a6146102b55780637251cd02146102bf57610133565b806306fdde0314610138578063095ea7b3146101b557806318160ddd146101f557806323b872dd1461020f575b600080fd5b610140610423565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561017a578181015183820152602001610162565b50505050905090810190601f1680156101a75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101e1600480360360408110156101cb57600080fd5b50600160a060020a0381351690602001356104b1565b604080519115158252519081900360200190f35b6101fd6104c7565b60408051918252519081900360200190f35b6101e16004803603606081101561022557600080fd5b50600160a060020a038135811691602081013590911690604001356104cd565b61024d610524565b6040805160ff9092168252519081900360200190f35b6101e16004803603604081101561027957600080fd5b50600160a060020a03813516906020013561052d565b6101fd600480360360208110156102a557600080fd5b5035600160a060020a0316610569565b6102bd610584565b005b6102bd600480360360408110156102d557600080fd5b5080359060200135600160a060020a03166105ee565b6102f361060f565b60408051600160a060020a039092168252519081900360200190f35b6101e161061e565b61014061062f565b6101e16004803603604081101561033557600080fd5b50600160a060020a03813516906020013561068a565b6101e16004803603604081101561036157600080fd5b50600160a060020a0381351690602001356106c6565b61037f6106d3565b6040518082600181111561038f57fe5b60ff16815260200191505060405180910390f35b6102bd600480360360408110156103b957600080fd5b5080359060200135600160a060020a03166106e1565b6101fd600480360360408110156103e557600080fd5b50600160a060020a03813581169160200135166106fe565b6102bd6004803603602081101561041357600080fd5b5035600160a060020a0316610729565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a95780601f1061047e576101008083540402835291602001916104a9565b820191906000526020600020905b81548152906001019060200180831161048c57829003601f168201915b505050505081565b60006104be338484610748565b50600192915050565b60025490565b60006104da8484846107d4565b600160a060020a03841660009081526001602090815260408083203380855292529091205461051a918691610515908663ffffffff6108a116565b610748565b5060019392505050565b60065460ff1681565b336000818152600160209081526040808320600160a060020a038716845290915281205490916104be918590610515908663ffffffff6108b616565b600160a060020a031660009081526020819052604090205490565b61058c61061e565b151561059757600080fd5b600354604051600091600160a060020a0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36003805473ffffffffffffffffffffffffffffffffffffffff19169055565b6105f661061e565b151561060157600080fd5b61060b81836108cf565b5050565b600354600160a060020a031690565b600354600160a060020a0316331490565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104a95780601f1061047e576101008083540402835291602001916104a9565b336000818152600160209081526040808320600160a060020a038716845290915281205490916104be918590610515908663ffffffff6108a116565b60006104be3384846107d4565b600654610100900460ff1681565b6106e961061e565b15156106f457600080fd5b61060b8183610979565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b61073161061e565b151561073c57600080fd5b61074581610a22565b50565b600160a060020a038216151561075d57600080fd5b600160a060020a038316151561077257600080fd5b600160a060020a03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600160a060020a03821615156107e957600080fd5b600160a060020a038316600090815260208190526040902054610812908263ffffffff6108a116565b600160a060020a038085166000908152602081905260408082209390935590841681522054610847908263ffffffff6108b616565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828211156108b057600080fd5b50900390565b6000828201838110156108c857600080fd5b9392505050565b600160a060020a03821615156108e457600080fd5b6002546108f7908263ffffffff6108b616565b600255600160a060020a038216600090815260208190526040902054610923908263ffffffff6108b616565b600160a060020a0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600160a060020a038216151561098e57600080fd5b6002546109a1908263ffffffff6108a116565b600255600160a060020a0382166000908152602081905260409020546109cd908263ffffffff6108a116565b600160a060020a038316600081815260208181526040808320949094558351858152935191937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929081900390910190a35050565b600160a060020a0381161515610a3757600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905556fea165627a7a72305820e84632a21e1d3c1dfeda16193bfa4e314be3c997609c800669b52f32d961d3e80029",
  "sourceMap": "1241:1772:18:-;;;1461:250;8:9:-1;5:2;;;30:1;27;20:12;5:2;1461:250:18;;;;;;;;;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;1461:250:18;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;0:372;;1461:250:18;;;;;;;19:11:-1;14:3;11:20;8:2;;;44:1;41;34:12;8:2;62:21;;123:4;114:14;;138:31;;;135:2;;;182:1;179;172:12;135:2;213:10;;261:11;244:29;;285:43;;;282:58;-1:-1;233:115;230:2;;;361:1;358;351:12;230:2;-1:-1;;1461:250:18;;;;;515:6:23;:19;;-1:-1:-1;;;;;;515:19:23;524:10;515:19;;;;;1461:250:18;549:40:23;1461:250:18;;-1:-1:-1;1461:250:18;;-1:-1:-1;;;;;;582:6:23;;515;;549:40;;515:6;;549:40;1590:16:18;;;;:4;;:16;;;;;:::i;:::-;-1:-1:-1;1616:20:18;;;;:6;;:20;;;;;:::i;:::-;-1:-1:-1;1646:8:18;:12;;-1:-1:-1;;1646:12:18;;;;1682:22;;1646:12;1682:22;;;;;;;1668:11;:36;;-1:-1:-1;;1668:36:18;;;:11;:36;;;;;;;;;;;;1461:250;;;1241:1772;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1241:1772:18;;;-1:-1:-1;1241:1772:18;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;",
  "deployedSourceMap": "1241:1772:18:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1241:1772:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1288:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8:100:-1;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;1288:18:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2721:145:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2721:145:24;;-1:-1:-1;;;;;2721:145:24;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;916:89;;;:::i;:::-;;;;;;;;;;;;;;;;3329:224;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;3329:224:24;;;;;;;;;;;;;;;;;:::i;1338:21:18:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;4067:200:24;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4067:200:24;;-1:-1:-1;;;;;4067:200:24;;;;;;:::i;1217:104::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1217:104:24;-1:-1:-1;;;;;1217:104:24;;:::i;1423:137:23:-;;;:::i;:::-;;2246:127:18;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2246:127:18;;;;;;-1:-1:-1;;;;;2246:127:18;;:::i;659:77:23:-;;;:::i;:::-;;;;-1:-1:-1;;;;;659:77:23;;;;;;;;;;;;;;979:90;;;:::i;1312:20:18:-;;;:::i;4786:210:24:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;4786:210:24;;-1:-1:-1;;;;;4786:210:24;;;;;;:::i;1948:137::-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1948:137:24;;-1:-1:-1;;;;;1948:137:24;;;;;;:::i;1366:29:18:-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2887:124;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;2887:124:18;;;;;;-1:-1:-1;;;;;2887:124:18;;:::i;1652:129:24:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;;;;;;1652:129:24;;;;;;;;;;:::i;1731:107:23:-;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;1731:107:23;-1:-1:-1;;;;;1731:107:23;;:::i;1288:18:18:-;;;;;;;;;;;;;;;-1:-1:-1;;1288:18:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;2721:145:24:-;2786:4;2802:36;2811:10;2823:7;2832:5;2802:8;:36::i;:::-;-1:-1:-1;2855:4:24;2721:145;;;;:::o;916:89::-;986:12;;916:89;:::o;3329:224::-;3408:4;3424:26;3434:4;3440:2;3444:5;3424:9;:26::i;:::-;-1:-1:-1;;;;;3487:14:24;;;;;;-1:-1:-1;3487:14:24;;;;;;;;3475:10;3487:26;;;;;;;;;3460:65;;3487:14;;:37;;3518:5;3487:30;:37::i;:::-;3460:8;:65::i;:::-;-1:-1:-1;3542:4:24;3329:224;;;;;:::o;1338:21:18:-;;;;;;:::o;4067:200:24:-;4172:10;4147:4;4193:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4193:29:24;;;;;;;;;;4147:4;;4163:76;;4193:29;;:45;;4227:10;4193:33;:45::i;1217:104::-;-1:-1:-1;;;;;1298:16:24;1272:7;1298:16;;;;;;;;;;;;1217:104::o;1423:137:23:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1505:6;;1484:40;;1521:1;;-1:-1:-1;;;;;1505:6:23;;1484:40;;1521:1;;1484:40;1534:6;:19;;-1:-1:-1;;1534:19:23;;;1423:137::o;2246:127:18:-;863:9:23;:7;:9::i;:::-;855:18;;;;;;;;2339:27:18;2345:9;2356;2339:5;:27::i;:::-;2246:127;;:::o;659:77:23:-;723:6;;-1:-1:-1;;;;;723:6:23;;659:77::o;979:90::-;1056:6;;-1:-1:-1;;;;;1056:6:23;1042:10;:20;;979:90::o;1312:20:18:-;;;;;;;;;;;;;;;-1:-1:-1;;1312:20:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4786:210:24;4896:10;4871:4;4917:20;;;:8;:20;;;;;;;;-1:-1:-1;;;;;4917:29:24;;;;;;;;;;4871:4;;4887:81;;4917:29;;:50;;4951:15;4917:33;:50::i;1948:137::-;2009:4;2025:32;2035:10;2047:2;2051:5;2025:9;:32::i;1366:29:18:-;;;;;;;;;:::o;2887:124::-;863:9:23;:7;:9::i;:::-;855:18;;;;;;;;2976:28:18;2982:8;2992:11;2976:5;:28::i;1652:129:24:-;-1:-1:-1;;;;;1750:15:24;;;1724:7;1750:15;;;-1:-1:-1;1750:15:24;;;;;;;;:24;;;;;;;;;;;;;1652:129::o;1731:107:23:-;863:9;:7;:9::i;:::-;855:18;;;;;;;;1803:28;1822:8;1803:18;:28::i;:::-;1731:107;:::o;6831:248:24:-;-1:-1:-1;;;;;6923:21:24;;;;6915:30;;;;;;-1:-1:-1;;;;;6963:19:24;;;;6955:28;;;;;;-1:-1:-1;;;;;6994:15:24;;;;;;;-1:-1:-1;6994:15:24;;;;;;;;:24;;;;;;;;;;;;;:32;;;7041:31;;;;;;;;;;;;;;;;;6831:248;;;:::o;5215:256::-;-1:-1:-1;;;;;5302:16:24;;;;5294:25;;;;;;-1:-1:-1;;;;;5348:15:24;;:9;:15;;;;;;;;;;;:26;;5368:5;5348:19;:26::i;:::-;-1:-1:-1;;;;;5330:15:24;;;:9;:15;;;;;;;;;;;:44;;;;5400:13;;;;;;;:24;;5418:5;5400:17;:24::i;:::-;-1:-1:-1;;;;;5384:13:24;;;:9;:13;;;;;;;;;;;;:40;;;;5439:25;;;;;;;5384:13;;5439:25;;;;;;;;;;;;;5215:256;;;:::o;1211:145:22:-;1269:7;1296:6;;;;1288:15;;;;;;-1:-1:-1;1325:5:22;;;1211:145::o;1439:::-;1497:7;1528:5;;;1551:6;;;;1543:15;;;;;;1576:1;1439:145;-1:-1:-1;;;1439:145:22:o;5814:263:24:-;-1:-1:-1;;;;;5888:21:24;;;;5880:30;;;;;;5936:12;;:23;;5953:5;5936:23;:16;:23;:::i;:::-;5921:12;:38;-1:-1:-1;;;;;5990:18:24;;:9;:18;;;;;;;;;;;:29;;6013:5;5990:22;:29::i;:::-;-1:-1:-1;;;;;5969:18:24;;:9;:18;;;;;;;;;;;:50;;;;6034:36;;;;;;;5969:18;;:9;;6034:36;;;;;;;;;;5814:263;;:::o;6303:::-;-1:-1:-1;;;;;6377:21:24;;;;6369:30;;;;;;6425:12;;:23;;6442:5;6425:23;:16;:23;:::i;:::-;6410:12;:38;-1:-1:-1;;;;;6479:18:24;;:9;:18;;;;;;;;;;;:29;;6502:5;6479:22;:29::i;:::-;-1:-1:-1;;;;;6458:18:24;;:9;:18;;;;;;;;;;;:50;;;;6523:36;;;;;;;6458:9;;6523:36;;;;;;;;;;;6303:263;;:::o;1982:183:23:-;-1:-1:-1;;;;;2055:22:23;;;;2047:31;;;;;;2114:6;;2093:38;;-1:-1:-1;;;;;2093:38:23;;;;2114:6;;2093:38;;2114:6;;2093:38;2141:6;:17;;-1:-1:-1;;2141:17:23;-1:-1:-1;;;;;2141:17:23;;;;;;;;;;1982:183::o",
  "source": "/*\n    Copyright 2017-2019 Phillip A. Elsasser\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use this file except in compliance with the License.\n    You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n*/\n\npragma solidity 0.5.2;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"openzeppelin-solidity/contracts/ownership/Ownable.sol\";\n\n\n/// @title Position Token\n/// @notice A token that represents a claim to a collateral pool and a short or long position.\n/// The collateral pool acts as the owner of this contract and controls minting and redemption of these\n/// tokens based on locked collateral in the pool.\n/// NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic\n/// every time a new market contract is deployed.\n/// @author Phil Elsasser <phil@marketprotocol.io>\ncontract PositionToken is ERC20, Ownable {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    MarketSide public MARKET_SIDE; // 0 = Long, 1 = Short\n    enum MarketSide { Long, Short }\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 marketSide\n    ) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = 0;\n        MARKET_SIDE = MarketSide(marketSide);\n    }\n\n    /// @dev Called by our MarketContract (owner) to create a long or short position token. These tokens are minted,\n    /// and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool\n    /// is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new\n    /// position tokens\n    /// @param qtyToMint quantity of position tokens to mint (in base units)\n    /// @param recipient the person minting and receiving these position tokens.\n    function mintAndSendToken(uint256 qtyToMint, address recipient) external onlyOwner {\n        _mint(recipient, qtyToMint);\n    }\n\n    /// @dev Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming\n    /// both short and long tokens in order to claim their collateral, or the contract has settled, and only a single\n    /// side of the tokens are needed to redeem (handled by the collateral pool)\n    /// @param qtyToRedeem quantity of tokens to burn (remove from supply / circulation)\n    /// @param redeemer the person redeeming these tokens (who are we taking the balance from)\n    function redeemToken(uint256 qtyToRedeem, address redeemer) external onlyOwner {\n        _burn(redeemer, qtyToRedeem);\n    }\n}\n",
  "sourcePath": "/Users/andreianisimov/projects/honeylemon/dapp.honeylemon.market/packages/contracts/contracts/marketprotocol/tokens/PositionToken.sol",
  "ast": {
    "absolutePath": "/Users/andreianisimov/projects/honeylemon/dapp.honeylemon.market/packages/contracts/contracts/marketprotocol/tokens/PositionToken.sol",
    "exportedSymbols": {
      "PositionToken": [
        3913
      ]
    },
    "id": 3914,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3837,
        "literals": [
          "solidity",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "608:22:18"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 3838,
        "nodeType": "ImportDirective",
        "scope": 3914,
        "sourceUnit": 4662,
        "src": "632:63:18",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "id": 3839,
        "nodeType": "ImportDirective",
        "scope": 3914,
        "sourceUnit": 4279,
        "src": "696:63:18",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3840,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4661,
              "src": "1267:5:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4661",
                "typeString": "contract ERC20"
              }
            },
            "id": 3841,
            "nodeType": "InheritanceSpecifier",
            "src": "1267:5:18"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3842,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4278,
              "src": "1274:7:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$4278",
                "typeString": "contract Ownable"
              }
            },
            "id": 3843,
            "nodeType": "InheritanceSpecifier",
            "src": "1274:7:18"
          }
        ],
        "contractDependencies": [
          4278,
          4661,
          4761
        ],
        "contractKind": "contract",
        "documentation": "@title Position Token\n @notice A token that represents a claim to a collateral pool and a short or long position.\n The collateral pool acts as the owner of this contract and controls minting and redemption of these\n tokens based on locked collateral in the pool.\n NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic\n every time a new market contract is deployed.\n @author Phil Elsasser <phil@marketprotocol.io>",
        "fullyImplemented": true,
        "id": 3913,
        "linearizedBaseContracts": [
          3913,
          4278,
          4661,
          4761
        ],
        "name": "PositionToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3845,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1288:18:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 3844,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1288:6:18",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3847,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1312:20:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 3846,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1312:6:18",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3849,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1338:21:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 3848,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1338:5:18",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3851,
            "name": "MARKET_SIDE",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1366:29:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_MarketSide_$3854",
              "typeString": "enum PositionToken.MarketSide"
            },
            "typeName": {
              "contractScope": null,
              "id": 3850,
              "name": "MarketSide",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3854,
              "src": "1366:10:18",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_MarketSide_$3854",
                "typeString": "enum PositionToken.MarketSide"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "canonicalName": "PositionToken.MarketSide",
            "id": 3854,
            "members": [
              {
                "id": 3852,
                "name": "Long",
                "nodeType": "EnumValue",
                "src": "1442:4:18"
              },
              {
                "id": 3853,
                "name": "Short",
                "nodeType": "EnumValue",
                "src": "1448:5:18"
              }
            ],
            "name": "MarketSide",
            "nodeType": "EnumDefinition",
            "src": "1424:31:18"
          },
          {
            "body": {
              "id": 3881,
              "nodeType": "Block",
              "src": "1580:131:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3865,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3863,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3845,
                      "src": "1590:4:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 3864,
                      "name": "tokenName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3856,
                      "src": "1597:9:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1590:16:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3866,
                  "nodeType": "ExpressionStatement",
                  "src": "1590:16:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3867,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3847,
                      "src": "1616:6:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 3868,
                      "name": "tokenSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3858,
                      "src": "1625:11:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1616:20:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3870,
                  "nodeType": "ExpressionStatement",
                  "src": "1616:20:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3873,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3871,
                      "name": "decimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3849,
                      "src": "1646:8:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 3872,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1657:1:18",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1646:12:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 3874,
                  "nodeType": "ExpressionStatement",
                  "src": "1646:12:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3875,
                      "name": "MARKET_SIDE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3851,
                      "src": "1668:11:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_MarketSide_$3854",
                        "typeString": "enum PositionToken.MarketSide"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 3877,
                          "name": "marketSide",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3860,
                          "src": "1693:10:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        ],
                        "id": 3876,
                        "name": "MarketSide",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3854,
                        "src": "1682:10:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_MarketSide_$3854_$",
                          "typeString": "type(enum PositionToken.MarketSide)"
                        }
                      },
                      "id": 3878,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1682:22:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_MarketSide_$3854",
                        "typeString": "enum PositionToken.MarketSide"
                      }
                    },
                    "src": "1668:36:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_MarketSide_$3854",
                      "typeString": "enum PositionToken.MarketSide"
                    }
                  },
                  "id": 3880,
                  "nodeType": "ExpressionStatement",
                  "src": "1668:36:18"
                }
              ]
            },
            "documentation": null,
            "id": 3882,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3856,
                  "name": "tokenName",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1482:23:18",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3855,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1482:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3858,
                  "name": "tokenSymbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1515:25:18",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3857,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1515:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3860,
                  "name": "marketSide",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1550:16:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3859,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1550:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1472:100:18"
            },
            "returnParameters": {
              "id": 3862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:0:18"
            },
            "scope": 3913,
            "src": "1461:250:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3896,
              "nodeType": "Block",
              "src": "2329:44:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3892,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3886,
                        "src": "2345:9:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3893,
                        "name": "qtyToMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3884,
                        "src": "2356:9:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3891,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4550,
                      "src": "2339:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3894,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2339:27:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3895,
                  "nodeType": "ExpressionStatement",
                  "src": "2339:27:18"
                }
              ]
            },
            "documentation": "@dev Called by our MarketContract (owner) to create a long or short position token. These tokens are minted,\n and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool\n is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new\n position tokens\n @param qtyToMint quantity of position tokens to mint (in base units)\n @param recipient the person minting and receiving these position tokens.",
            "id": 3897,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3889,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3888,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4212,
                  "src": "2319:9:18",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2319:9:18"
              }
            ],
            "name": "mintAndSendToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3884,
                  "name": "qtyToMint",
                  "nodeType": "VariableDeclaration",
                  "scope": 3897,
                  "src": "2272:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2272:7:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3886,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 3897,
                  "src": "2291:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2291:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2271:38:18"
            },
            "returnParameters": {
              "id": 3890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2329:0:18"
            },
            "scope": 3913,
            "src": "2246:127:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 3911,
              "nodeType": "Block",
              "src": "2966:45:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3907,
                        "name": "redeemer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3901,
                        "src": "2982:8:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3908,
                        "name": "qtyToRedeem",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3899,
                        "src": "2992:11:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3906,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4592,
                      "src": "2976:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3909,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2976:28:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3910,
                  "nodeType": "ExpressionStatement",
                  "src": "2976:28:18"
                }
              ]
            },
            "documentation": "@dev Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming\n both short and long tokens in order to claim their collateral, or the contract has settled, and only a single\n side of the tokens are needed to redeem (handled by the collateral pool)\n @param qtyToRedeem quantity of tokens to burn (remove from supply / circulation)\n @param redeemer the person redeeming these tokens (who are we taking the balance from)",
            "id": 3912,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3904,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3903,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4212,
                  "src": "2956:9:18",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2956:9:18"
              }
            ],
            "name": "redeemToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3902,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3899,
                  "name": "qtyToRedeem",
                  "nodeType": "VariableDeclaration",
                  "scope": 3912,
                  "src": "2908:19:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3898,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2908:7:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3901,
                  "name": "redeemer",
                  "nodeType": "VariableDeclaration",
                  "scope": 3912,
                  "src": "2929:16:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3900,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2929:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2907:39:18"
            },
            "returnParameters": {
              "id": 3905,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2966:0:18"
            },
            "scope": 3913,
            "src": "2887:124:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3914,
        "src": "1241:1772:18"
      }
    ],
    "src": "608:2406:18"
  },
  "legacyAST": {
    "absolutePath": "/Users/andreianisimov/projects/honeylemon/dapp.honeylemon.market/packages/contracts/contracts/marketprotocol/tokens/PositionToken.sol",
    "exportedSymbols": {
      "PositionToken": [
        3913
      ]
    },
    "id": 3914,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 3837,
        "literals": [
          "solidity",
          "0.5",
          ".2"
        ],
        "nodeType": "PragmaDirective",
        "src": "608:22:18"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 3838,
        "nodeType": "ImportDirective",
        "scope": 3914,
        "sourceUnit": 4662,
        "src": "632:63:18",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "file": "openzeppelin-solidity/contracts/ownership/Ownable.sol",
        "id": 3839,
        "nodeType": "ImportDirective",
        "scope": 3914,
        "sourceUnit": 4279,
        "src": "696:63:18",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3840,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4661,
              "src": "1267:5:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4661",
                "typeString": "contract ERC20"
              }
            },
            "id": 3841,
            "nodeType": "InheritanceSpecifier",
            "src": "1267:5:18"
          },
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 3842,
              "name": "Ownable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4278,
              "src": "1274:7:18",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Ownable_$4278",
                "typeString": "contract Ownable"
              }
            },
            "id": 3843,
            "nodeType": "InheritanceSpecifier",
            "src": "1274:7:18"
          }
        ],
        "contractDependencies": [
          4278,
          4661,
          4761
        ],
        "contractKind": "contract",
        "documentation": "@title Position Token\n @notice A token that represents a claim to a collateral pool and a short or long position.\n The collateral pool acts as the owner of this contract and controls minting and redemption of these\n tokens based on locked collateral in the pool.\n NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic\n every time a new market contract is deployed.\n @author Phil Elsasser <phil@marketprotocol.io>",
        "fullyImplemented": true,
        "id": 3913,
        "linearizedBaseContracts": [
          3913,
          4278,
          4661,
          4761
        ],
        "name": "PositionToken",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 3845,
            "name": "name",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1288:18:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 3844,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1288:6:18",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3847,
            "name": "symbol",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1312:20:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 3846,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "1312:6:18",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3849,
            "name": "decimals",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1338:21:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 3848,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "1338:5:18",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 3851,
            "name": "MARKET_SIDE",
            "nodeType": "VariableDeclaration",
            "scope": 3913,
            "src": "1366:29:18",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_MarketSide_$3854",
              "typeString": "enum PositionToken.MarketSide"
            },
            "typeName": {
              "contractScope": null,
              "id": 3850,
              "name": "MarketSide",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 3854,
              "src": "1366:10:18",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_MarketSide_$3854",
                "typeString": "enum PositionToken.MarketSide"
              }
            },
            "value": null,
            "visibility": "public"
          },
          {
            "canonicalName": "PositionToken.MarketSide",
            "id": 3854,
            "members": [
              {
                "id": 3852,
                "name": "Long",
                "nodeType": "EnumValue",
                "src": "1442:4:18"
              },
              {
                "id": 3853,
                "name": "Short",
                "nodeType": "EnumValue",
                "src": "1448:5:18"
              }
            ],
            "name": "MarketSide",
            "nodeType": "EnumDefinition",
            "src": "1424:31:18"
          },
          {
            "body": {
              "id": 3881,
              "nodeType": "Block",
              "src": "1580:131:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3865,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3863,
                      "name": "name",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3845,
                      "src": "1590:4:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 3864,
                      "name": "tokenName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3856,
                      "src": "1597:9:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1590:16:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3866,
                  "nodeType": "ExpressionStatement",
                  "src": "1590:16:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3869,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3867,
                      "name": "symbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3847,
                      "src": "1616:6:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "id": 3868,
                      "name": "tokenSymbol",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3858,
                      "src": "1625:11:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string memory"
                      }
                    },
                    "src": "1616:20:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 3870,
                  "nodeType": "ExpressionStatement",
                  "src": "1616:20:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3873,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3871,
                      "name": "decimals",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3849,
                      "src": "1646:8:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "hexValue": "30",
                      "id": 3872,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1657:1:18",
                      "subdenomination": null,
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "src": "1646:12:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "id": 3874,
                  "nodeType": "ExpressionStatement",
                  "src": "1646:12:18"
                },
                {
                  "expression": {
                    "argumentTypes": null,
                    "id": 3879,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "argumentTypes": null,
                      "id": 3875,
                      "name": "MARKET_SIDE",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3851,
                      "src": "1668:11:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_MarketSide_$3854",
                        "typeString": "enum PositionToken.MarketSide"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "id": 3877,
                          "name": "marketSide",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3860,
                          "src": "1693:10:18",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        ],
                        "id": 3876,
                        "name": "MarketSide",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3854,
                        "src": "1682:10:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_MarketSide_$3854_$",
                          "typeString": "type(enum PositionToken.MarketSide)"
                        }
                      },
                      "id": 3878,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1682:22:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_MarketSide_$3854",
                        "typeString": "enum PositionToken.MarketSide"
                      }
                    },
                    "src": "1668:36:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_MarketSide_$3854",
                      "typeString": "enum PositionToken.MarketSide"
                    }
                  },
                  "id": 3880,
                  "nodeType": "ExpressionStatement",
                  "src": "1668:36:18"
                }
              ]
            },
            "documentation": null,
            "id": 3882,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3856,
                  "name": "tokenName",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1482:23:18",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3855,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1482:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3858,
                  "name": "tokenSymbol",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1515:25:18",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 3857,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "1515:6:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3860,
                  "name": "marketSide",
                  "nodeType": "VariableDeclaration",
                  "scope": 3882,
                  "src": "1550:16:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  },
                  "typeName": {
                    "id": 3859,
                    "name": "uint8",
                    "nodeType": "ElementaryTypeName",
                    "src": "1550:5:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint8",
                      "typeString": "uint8"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "1472:100:18"
            },
            "returnParameters": {
              "id": 3862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1580:0:18"
            },
            "scope": 3913,
            "src": "1461:250:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          },
          {
            "body": {
              "id": 3896,
              "nodeType": "Block",
              "src": "2329:44:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3892,
                        "name": "recipient",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3886,
                        "src": "2345:9:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3893,
                        "name": "qtyToMint",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3884,
                        "src": "2356:9:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3891,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4550,
                      "src": "2339:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3894,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2339:27:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3895,
                  "nodeType": "ExpressionStatement",
                  "src": "2339:27:18"
                }
              ]
            },
            "documentation": "@dev Called by our MarketContract (owner) to create a long or short position token. These tokens are minted,\n and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool\n is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new\n position tokens\n @param qtyToMint quantity of position tokens to mint (in base units)\n @param recipient the person minting and receiving these position tokens.",
            "id": 3897,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3889,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3888,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4212,
                  "src": "2319:9:18",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2319:9:18"
              }
            ],
            "name": "mintAndSendToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3887,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3884,
                  "name": "qtyToMint",
                  "nodeType": "VariableDeclaration",
                  "scope": 3897,
                  "src": "2272:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3883,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2272:7:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3886,
                  "name": "recipient",
                  "nodeType": "VariableDeclaration",
                  "scope": 3897,
                  "src": "2291:17:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3885,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2291:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2271:38:18"
            },
            "returnParameters": {
              "id": 3890,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2329:0:18"
            },
            "scope": 3913,
            "src": "2246:127:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          },
          {
            "body": {
              "id": 3911,
              "nodeType": "Block",
              "src": "2966:45:18",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 3907,
                        "name": "redeemer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3901,
                        "src": "2982:8:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 3908,
                        "name": "qtyToRedeem",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 3899,
                        "src": "2992:11:18",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 3906,
                      "name": "_burn",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 4592,
                      "src": "2976:5:18",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 3909,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2976:28:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 3910,
                  "nodeType": "ExpressionStatement",
                  "src": "2976:28:18"
                }
              ]
            },
            "documentation": "@dev Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming\n both short and long tokens in order to claim their collateral, or the contract has settled, and only a single\n side of the tokens are needed to redeem (handled by the collateral pool)\n @param qtyToRedeem quantity of tokens to burn (remove from supply / circulation)\n @param redeemer the person redeeming these tokens (who are we taking the balance from)",
            "id": 3912,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "arguments": null,
                "id": 3904,
                "modifierName": {
                  "argumentTypes": null,
                  "id": 3903,
                  "name": "onlyOwner",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 4212,
                  "src": "2956:9:18",
                  "typeDescriptions": {
                    "typeIdentifier": "t_modifier$__$",
                    "typeString": "modifier ()"
                  }
                },
                "nodeType": "ModifierInvocation",
                "src": "2956:9:18"
              }
            ],
            "name": "redeemToken",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 3902,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3899,
                  "name": "qtyToRedeem",
                  "nodeType": "VariableDeclaration",
                  "scope": 3912,
                  "src": "2908:19:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 3898,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2908:7:18",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 3901,
                  "name": "redeemer",
                  "nodeType": "VariableDeclaration",
                  "scope": 3912,
                  "src": "2929:16:18",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 3900,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2929:7:18",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "2907:39:18"
            },
            "returnParameters": {
              "id": 3905,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2966:0:18"
            },
            "scope": 3913,
            "src": "2887:124:18",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "external"
          }
        ],
        "scope": 3914,
        "src": "1241:1772:18"
      }
    ],
    "src": "608:2406:18"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.2+commit.1df8f40c.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.2.0",
  "updatedAt": "2020-07-17T15:20:56.358Z",
  "devdoc": {
    "author": "Phil Elsasser <phil@marketprotocol.io>",
    "methods": {
      "allowance(address,address)": {
        "details": "Function to check the amount of tokens that an owner allowed to a spender.",
        "params": {
          "owner": "address The address which owns the funds.",
          "spender": "address The address which will spend the funds."
        },
        "return": "A uint256 specifying the amount of tokens still available for the spender."
      },
      "approve(address,uint256)": {
        "details": "Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729",
        "params": {
          "spender": "The address which will spend the funds.",
          "value": "The amount of tokens to be spent."
        }
      },
      "balanceOf(address)": {
        "details": "Gets the balance of the specified address.",
        "params": {
          "owner": "The address to query the balance of."
        },
        "return": "A uint256 representing the amount owned by the passed address."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Decrease the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "spender": "The address which will spend the funds.",
          "subtractedValue": "The amount of tokens to decrease the allowance by."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Increase the amount of tokens that an owner allowed to a spender. approve should be called when _allowed[msg.sender][spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol Emits an Approval event.",
        "params": {
          "addedValue": "The amount of tokens to increase the allowance by.",
          "spender": "The address which will spend the funds."
        }
      },
      "isOwner()": {
        "return": "true if `msg.sender` is the owner of the contract."
      },
      "mintAndSendToken(uint256,address)": {
        "details": "Called by our MarketContract (owner) to create a long or short position token. These tokens are minted, and then transferred to our recipient who is the party who is minting these tokens.  The collateral pool is the only caller (acts as the owner) because collateral must be deposited / locked prior to minting of new position tokens",
        "params": {
          "qtyToMint": "quantity of position tokens to mint (in base units)",
          "recipient": "the person minting and receiving these position tokens."
        }
      },
      "owner()": {
        "return": "the address of the owner."
      },
      "redeemToken(uint256,address)": {
        "details": "Called by our MarketContract (owner) when redemption occurs.  This means that either a single user is redeeming both short and long tokens in order to claim their collateral, or the contract has settled, and only a single side of the tokens are needed to redeem (handled by the collateral pool)",
        "params": {
          "qtyToRedeem": "quantity of tokens to burn (remove from supply / circulation)",
          "redeemer": "the person redeeming these tokens (who are we taking the balance from)"
        }
      },
      "renounceOwnership()": {
        "details": "Allows the current owner to relinquish control of the contract. It will not be possible to call the functions with the `onlyOwner` modifier anymore."
      },
      "totalSupply()": {
        "details": "Total number of tokens in existence"
      },
      "transfer(address,uint256)": {
        "details": "Transfer token to a specified address",
        "params": {
          "to": "The address to transfer to.",
          "value": "The amount to be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Transfer tokens from one address to another. Note that while this function emits an Approval event, this is not required as per the specification, and other compliant implementations may not emit the event.",
        "params": {
          "from": "address The address which you want to send tokens from",
          "to": "address The address which you want to transfer to",
          "value": "uint256 the amount of tokens to be transferred"
        }
      },
      "transferOwnership(address)": {
        "details": "Allows the current owner to transfer control of the contract to a newOwner.",
        "params": {
          "newOwner": "The address to transfer ownership to."
        }
      }
    },
    "title": "Position Token"
  },
  "userdoc": {
    "methods": {
      "renounceOwnership()": {
        "notice": "Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      }
    },
    "notice": "A token that represents a claim to a collateral pool and a short or long position. The collateral pool acts as the owner of this contract and controls minting and redemption of these tokens based on locked collateral in the pool. NOTE: We eventually can move all of this logic into a library to avoid deploying all of the logic every time a new market contract is deployed."
  }
}