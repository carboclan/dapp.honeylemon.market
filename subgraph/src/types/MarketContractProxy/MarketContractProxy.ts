// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class PositionTokensMinted extends ethereum.Event {
  get params(): PositionTokensMinted__Params {
    return new PositionTokensMinted__Params(this);
  }
}

export class PositionTokensMinted__Params {
  _event: PositionTokensMinted;

  constructor(event: PositionTokensMinted) {
    this._event = event;
  }

  get marketId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractName(): string {
    return this._event.parameters[1].value.toString();
  }

  get longTokenRecipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get longTokenDSProxy(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get shortTokenRecipient(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get shortTokenDSProxy(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get qtyToMint(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get latestMarketContract(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get longTokenAddress(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get shortTokenAddress(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get time(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }
}

export class BatchTokensRedeemed extends ethereum.Event {
  get params(): BatchTokensRedeemed__Params {
    return new BatchTokensRedeemed__Params(this);
  }
}

export class BatchTokensRedeemed__Params {
  _event: BatchTokensRedeemed;

  constructor(event: BatchTokensRedeemed) {
    this._event = event;
  }

  get tokenAddresses(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get marketAddresses(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokensToRedeem(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get traderLong(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }
}

export class LogEvent extends ethereum.Event {
  get params(): LogEvent__Params {
    return new LogEvent__Params(this);
  }
}

export class LogEvent__Params {
  _event: LogEvent;

  constructor(event: LogEvent) {
    this._event = event;
  }

  get msgsender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get addressthis(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get param(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokenAddress(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketContractProxy extends ethereum.SmartContract {
  static bind(address: Address): MarketContractProxy {
    return new MarketContractProxy("MarketContractProxy", address);
  }

  CONTRACT_DURATION_DAYS(): BigInt {
    let result = super.call(
      "CONTRACT_DURATION_DAYS",
      "CONTRACT_DURATION_DAYS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONTRACT_DURATION_DAYS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONTRACT_DURATION_DAYS",
      "CONTRACT_DURATION_DAYS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINTER_BRIDGE_ADDRESS(): Address {
    let result = super.call(
      "MINTER_BRIDGE_ADDRESS",
      "MINTER_BRIDGE_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_MINTER_BRIDGE_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "MINTER_BRIDGE_ADDRESS",
      "MINTER_BRIDGE_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_DURATION(): BigInt {
    let result = super.call(
      "CONTRACT_DURATION",
      "CONTRACT_DURATION():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONTRACT_DURATION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONTRACT_DURATION",
      "CONTRACT_DURATION():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  COLLATERAL_TOKEN_ADDRESS(): Address {
    let result = super.call(
      "COLLATERAL_TOKEN_ADDRESS",
      "COLLATERAL_TOKEN_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_COLLATERAL_TOKEN_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "COLLATERAL_TOKEN_ADDRESS",
      "COLLATERAL_TOKEN_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ORACLE_URL(): string {
    let result = super.call("ORACLE_URL", "ORACLE_URL():(string)", []);

    return result[0].toString();
  }

  try_ORACLE_URL(): ethereum.CallResult<string> {
    let result = super.tryCall("ORACLE_URL", "ORACLE_URL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ORACLE_STATISTIC(): string {
    let result = super.call(
      "ORACLE_STATISTIC",
      "ORACLE_STATISTIC():(string)",
      []
    );

    return result[0].toString();
  }

  try_ORACLE_STATISTIC(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "ORACLE_STATISTIC",
      "ORACLE_STATISTIC():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  marketContracts(param0: BigInt): Address {
    let result = super.call(
      "marketContracts",
      "marketContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_marketContracts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "marketContracts",
      "marketContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  marketContractSpecs(param0: BigInt): BigInt {
    let result = super.call(
      "marketContractSpecs",
      "marketContractSpecs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_marketContractSpecs(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketContractSpecs",
      "marketContractSpecs(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dSProxyToAddress(param0: Address): Address {
    let result = super.call(
      "dSProxyToAddress",
      "dSProxyToAddress(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_dSProxyToAddress(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dSProxyToAddress",
      "dSProxyToAddress(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  CONTRACT_COLLATERAL_RATIO(): BigInt {
    let result = super.call(
      "CONTRACT_COLLATERAL_RATIO",
      "CONTRACT_COLLATERAL_RATIO():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONTRACT_COLLATERAL_RATIO(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONTRACT_COLLATERAL_RATIO",
      "CONTRACT_COLLATERAL_RATIO():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  HONEY_LEMON_ORACLE_ADDRESS(): Address {
    let result = super.call(
      "HONEY_LEMON_ORACLE_ADDRESS",
      "HONEY_LEMON_ORACLE_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_HONEY_LEMON_ORACLE_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "HONEY_LEMON_ORACLE_ADDRESS",
      "HONEY_LEMON_ORACLE_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  addressToDSProxy(param0: Address): Address {
    let result = super.call(
      "addressToDSProxy",
      "addressToDSProxy(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_addressToDSProxy(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressToDSProxy",
      "addressToDSProxy(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFillableAmounts(makerAddresses: Array<Address>): Array<BigInt> {
    let result = super.call(
      "getFillableAmounts",
      "getFillableAmounts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(makerAddresses)]
    );

    return result[0].toBigIntArray();
  }

  try_getFillableAmounts(
    makerAddresses: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getFillableAmounts",
      "getFillableAmounts(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(makerAddresses)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFillableAmount(makerAddress: Address): BigInt {
    let result = super.call(
      "getFillableAmount",
      "getFillableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(makerAddress)]
    );

    return result[0].toBigInt();
  }

  try_getFillableAmount(makerAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFillableAmount",
      "getFillableAmount(address):(uint256)",
      [ethereum.Value.fromAddress(makerAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLatestMarketContract(): Address {
    let result = super.call(
      "getLatestMarketContract",
      "getLatestMarketContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLatestMarketContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLatestMarketContract",
      "getLatestMarketContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExpiringMarketContract(): Address {
    let result = super.call(
      "getExpiringMarketContract",
      "getExpiringMarketContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getExpiringMarketContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getExpiringMarketContract",
      "getExpiringMarketContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateralPool(market: Address): Address {
    let result = super.call(
      "getCollateralPool",
      "getCollateralPool(address):(address)",
      [ethereum.Value.fromAddress(market)]
    );

    return result[0].toAddress();
  }

  try_getCollateralPool(market: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollateralPool",
      "getCollateralPool(address):(address)",
      [ethereum.Value.fromAddress(market)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLatestMarketCollateralPool(): Address {
    let result = super.call(
      "getLatestMarketCollateralPool",
      "getLatestMarketCollateralPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLatestMarketCollateralPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLatestMarketCollateralPool",
      "getLatestMarketCollateralPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateRequiredCollateral(amount: BigInt): BigInt {
    let result = super.call(
      "calculateRequiredCollateral",
      "calculateRequiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );

    return result[0].toBigInt();
  }

  try_calculateRequiredCollateral(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateRequiredCollateral",
      "calculateRequiredCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllMarketContracts(): Array<Address> {
    let result = super.call(
      "getAllMarketContracts",
      "getAllMarketContracts():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllMarketContracts(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllMarketContracts",
      "getAllMarketContracts():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTime(): BigInt {
    let result = super.call("getTime", "getTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTime", "getTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUserAddressOrDSProxy(inputAddress: Address): Address {
    let result = super.call(
      "getUserAddressOrDSProxy",
      "getUserAddressOrDSProxy(address):(address)",
      [ethereum.Value.fromAddress(inputAddress)]
    );

    return result[0].toAddress();
  }

  try_getUserAddressOrDSProxy(
    inputAddress: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUserAddressOrDSProxy",
      "getUserAddressOrDSProxy(address):(address)",
      [ethereum.Value.fromAddress(inputAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createDSProxyWallet(): Address {
    let result = super.call(
      "createDSProxyWallet",
      "createDSProxyWallet():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_createDSProxyWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createDSProxyWallet",
      "createDSProxyWallet():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployContract(
    currentMRI: BigInt,
    marketAndsTokenNames: Array<Bytes>,
    expiration: BigInt
  ): Address {
    let result = super.call(
      "deployContract",
      "deployContract(uint256,bytes32[3],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(currentMRI),
        ethereum.Value.fromFixedBytesArray(marketAndsTokenNames),
        ethereum.Value.fromUnsignedBigInt(expiration)
      ]
    );

    return result[0].toAddress();
  }

  try_deployContract(
    currentMRI: BigInt,
    marketAndsTokenNames: Array<Bytes>,
    expiration: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployContract",
      "deployContract(uint256,bytes32[3],uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(currentMRI),
        ethereum.Value.fromFixedBytesArray(marketAndsTokenNames),
        ethereum.Value.fromUnsignedBigInt(expiration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  generateContractSpecs(currentMRI: BigInt, expiration: BigInt): Array<BigInt> {
    let result = super.call(
      "generateContractSpecs",
      "generateContractSpecs(uint256,uint256):(uint256[7])",
      [
        ethereum.Value.fromUnsignedBigInt(currentMRI),
        ethereum.Value.fromUnsignedBigInt(expiration)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_generateContractSpecs(
    currentMRI: BigInt,
    expiration: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "generateContractSpecs",
      "generateContractSpecs(uint256,uint256):(uint256[7])",
      [
        ethereum.Value.fromUnsignedBigInt(currentMRI),
        ethereum.Value.fromUnsignedBigInt(expiration)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _marketContractFactoryMPX(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _honeyLemonOracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _minterBridge(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _imBTCTokenAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class GetAllMarketContractsCall extends ethereum.Call {
  get inputs(): GetAllMarketContractsCall__Inputs {
    return new GetAllMarketContractsCall__Inputs(this);
  }

  get outputs(): GetAllMarketContractsCall__Outputs {
    return new GetAllMarketContractsCall__Outputs(this);
  }
}

export class GetAllMarketContractsCall__Inputs {
  _call: GetAllMarketContractsCall;

  constructor(call: GetAllMarketContractsCall) {
    this._call = call;
  }
}

export class GetAllMarketContractsCall__Outputs {
  _call: GetAllMarketContractsCall;

  constructor(call: GetAllMarketContractsCall) {
    this._call = call;
  }

  get value0(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }
}

export class BalanceOfCall extends ethereum.Call {
  get inputs(): BalanceOfCall__Inputs {
    return new BalanceOfCall__Inputs(this);
  }

  get outputs(): BalanceOfCall__Outputs {
    return new BalanceOfCall__Outputs(this);
  }
}

export class BalanceOfCall__Inputs {
  _call: BalanceOfCall;

  constructor(call: BalanceOfCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BalanceOfCall__Outputs {
  _call: BalanceOfCall;

  constructor(call: BalanceOfCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class GetTimeCall extends ethereum.Call {
  get inputs(): GetTimeCall__Inputs {
    return new GetTimeCall__Inputs(this);
  }

  get outputs(): GetTimeCall__Outputs {
    return new GetTimeCall__Outputs(this);
  }
}

export class GetTimeCall__Inputs {
  _call: GetTimeCall;

  constructor(call: GetTimeCall) {
    this._call = call;
  }
}

export class GetTimeCall__Outputs {
  _call: GetTimeCall;

  constructor(call: GetTimeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateDSProxyWalletCall extends ethereum.Call {
  get inputs(): CreateDSProxyWalletCall__Inputs {
    return new CreateDSProxyWalletCall__Inputs(this);
  }

  get outputs(): CreateDSProxyWalletCall__Outputs {
    return new CreateDSProxyWalletCall__Outputs(this);
  }
}

export class CreateDSProxyWalletCall__Inputs {
  _call: CreateDSProxyWalletCall;

  constructor(call: CreateDSProxyWalletCall) {
    this._call = call;
  }
}

export class CreateDSProxyWalletCall__Outputs {
  _call: CreateDSProxyWalletCall;

  constructor(call: CreateDSProxyWalletCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class BatchRedeemCall extends ethereum.Call {
  get inputs(): BatchRedeemCall__Inputs {
    return new BatchRedeemCall__Inputs(this);
  }

  get outputs(): BatchRedeemCall__Outputs {
    return new BatchRedeemCall__Outputs(this);
  }
}

export class BatchRedeemCall__Inputs {
  _call: BatchRedeemCall;

  constructor(call: BatchRedeemCall) {
    this._call = call;
  }

  get tokenAddresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get marketAddresses(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get tokensToRedeem(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get traderLong(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class BatchRedeemCall__Outputs {
  _call: BatchRedeemCall;

  constructor(call: BatchRedeemCall) {
    this._call = call;
  }
}

export class DailySettlementCall extends ethereum.Call {
  get inputs(): DailySettlementCall__Inputs {
    return new DailySettlementCall__Inputs(this);
  }

  get outputs(): DailySettlementCall__Outputs {
    return new DailySettlementCall__Outputs(this);
  }
}

export class DailySettlementCall__Inputs {
  _call: DailySettlementCall;

  constructor(call: DailySettlementCall) {
    this._call = call;
  }

  get lookbackIndexValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get currentIndexValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get marketAndsTokenNames(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get newMarketExpiration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class DailySettlementCall__Outputs {
  _call: DailySettlementCall;

  constructor(call: DailySettlementCall) {
    this._call = call;
  }
}

export class MintPositionTokensCall extends ethereum.Call {
  get inputs(): MintPositionTokensCall__Inputs {
    return new MintPositionTokensCall__Inputs(this);
  }

  get outputs(): MintPositionTokensCall__Outputs {
    return new MintPositionTokensCall__Outputs(this);
  }
}

export class MintPositionTokensCall__Inputs {
  _call: MintPositionTokensCall;

  constructor(call: MintPositionTokensCall) {
    this._call = call;
  }

  get qtyToMint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get longTokenRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get shortTokenRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MintPositionTokensCall__Outputs {
  _call: MintPositionTokensCall;

  constructor(call: MintPositionTokensCall) {
    this._call = call;
  }
}

export class SetOracleAddressCall extends ethereum.Call {
  get inputs(): SetOracleAddressCall__Inputs {
    return new SetOracleAddressCall__Inputs(this);
  }

  get outputs(): SetOracleAddressCall__Outputs {
    return new SetOracleAddressCall__Outputs(this);
  }
}

export class SetOracleAddressCall__Inputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }

  get _honeyLemonOracleAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleAddressCall__Outputs {
  _call: SetOracleAddressCall;

  constructor(call: SetOracleAddressCall) {
    this._call = call;
  }
}

export class SetMinterBridgeAddressCall extends ethereum.Call {
  get inputs(): SetMinterBridgeAddressCall__Inputs {
    return new SetMinterBridgeAddressCall__Inputs(this);
  }

  get outputs(): SetMinterBridgeAddressCall__Outputs {
    return new SetMinterBridgeAddressCall__Outputs(this);
  }
}

export class SetMinterBridgeAddressCall__Inputs {
  _call: SetMinterBridgeAddressCall;

  constructor(call: SetMinterBridgeAddressCall) {
    this._call = call;
  }

  get _minterBridgeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMinterBridgeAddressCall__Outputs {
  _call: SetMinterBridgeAddressCall;

  constructor(call: SetMinterBridgeAddressCall) {
    this._call = call;
  }
}

export class SetMarketContractSpecsCall extends ethereum.Call {
  get inputs(): SetMarketContractSpecsCall__Inputs {
    return new SetMarketContractSpecsCall__Inputs(this);
  }

  get outputs(): SetMarketContractSpecsCall__Outputs {
    return new SetMarketContractSpecsCall__Outputs(this);
  }
}

export class SetMarketContractSpecsCall__Inputs {
  _call: SetMarketContractSpecsCall;

  constructor(call: SetMarketContractSpecsCall) {
    this._call = call;
  }

  get _params(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class SetMarketContractSpecsCall__Outputs {
  _call: SetMarketContractSpecsCall;

  constructor(call: SetMarketContractSpecsCall) {
    this._call = call;
  }
}

export class SettleMarketContractCall extends ethereum.Call {
  get inputs(): SettleMarketContractCall__Inputs {
    return new SettleMarketContractCall__Inputs(this);
  }

  get outputs(): SettleMarketContractCall__Outputs {
    return new SettleMarketContractCall__Outputs(this);
  }
}

export class SettleMarketContractCall__Inputs {
  _call: SettleMarketContractCall;

  constructor(call: SettleMarketContractCall) {
    this._call = call;
  }

  get mri(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get marketContractAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SettleMarketContractCall__Outputs {
  _call: SettleMarketContractCall;

  constructor(call: SettleMarketContractCall) {
    this._call = call;
  }
}

export class DeployContractCall extends ethereum.Call {
  get inputs(): DeployContractCall__Inputs {
    return new DeployContractCall__Inputs(this);
  }

  get outputs(): DeployContractCall__Outputs {
    return new DeployContractCall__Outputs(this);
  }
}

export class DeployContractCall__Inputs {
  _call: DeployContractCall;

  constructor(call: DeployContractCall) {
    this._call = call;
  }

  get currentMRI(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get marketAndsTokenNames(): Array<Bytes> {
    return this._call.inputValues[1].value.toBytesArray();
  }

  get expiration(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DeployContractCall__Outputs {
  _call: DeployContractCall;

  constructor(call: DeployContractCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class GenerateContractSpecsCall extends ethereum.Call {
  get inputs(): GenerateContractSpecsCall__Inputs {
    return new GenerateContractSpecsCall__Inputs(this);
  }

  get outputs(): GenerateContractSpecsCall__Outputs {
    return new GenerateContractSpecsCall__Outputs(this);
  }
}

export class GenerateContractSpecsCall__Inputs {
  _call: GenerateContractSpecsCall;

  constructor(call: GenerateContractSpecsCall) {
    this._call = call;
  }

  get currentMRI(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get expiration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GenerateContractSpecsCall__Outputs {
  _call: GenerateContractSpecsCall;

  constructor(call: GenerateContractSpecsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}
